1. Create a class SET. Create member functions to perform the following SET operations:
1) ismember: check whether an element belongs to the set or not and return value as
true/false.
2) powerset: list all the elements of the power set of a set .
3) subset: Check whether one set is a subset of the other or not.
4) union and Intersection of two Sets.
5) complement: Assume Universal Set as per the input elements from the user.
6) set Difference and Symmetric Difference between two sets.
7) cartesian Product of Sets.
Write a menu driven program to perform the above functions on an instance of the SET
class.
2. Create a class RELATION, use Matrix notation to represent a relation. Include member
functions to check if the relation is Reflexive, Symmetric, Anti-symmetric, Transitive.
Using these functions check whether the given relation is: Equivalence or Partial Order
relation or None
3. Write a Program that generates all the permutations of a given set of digits, with or
without repetition.
4. For any number n, write a program to list all the solutions of the equation x1 + x2 + x3 +
...+ xn = C, where C is a constant (C<=10) and x1
, x2
,x3
,...,xn are nonnegative integers,
using brute force strategy 5. Write a Program to evaluate a polynomial function. (For example store f(x) = 4n2 + 2n +
9 in an array and for a given value of n, say n = 5, compute the value of f(n)).
6. Write a Program to check if a given graph is a complete graph. Represent the graph using
the Adjacency Matrix representation.
7. Write a Program to check if a given graph is a complete graph. Represent the graph using
the Adjacency List representation.
8. Write a Program to accept a directed graph G and compute the in-degree and out-degree
of each vertex.
