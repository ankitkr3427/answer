1) Insertion Sort with reporting the number of comparisons:
```cpp
#include <iostream>
#include <vector>
using namespace std;
int insertionSort(vector<int>& arr) {
int comparisons = 0;
int n = arr.size();
for (int i = 1; i < n; i++) {
int key = arr[i];
int j = i - 1;
while (j >= 0 && arr[j] > key) {
arr[j + 1] = arr[j];
j--;
comparisons++;
}
arr[j + 1] = key;
}
return comparisons;
}
int main() {
vector<int> arr = {12, 11, 13, 5, 6};
int comparisons = insertionSort(arr);
cout << "Sorted array:";
for (int x : arr)
cout << " " << x;
cout << "\nComparisons: " << comparisons << endl;
return 0;
}
```
2) Merge Sort with reporting the number of comparisons:
```cpp
#include <iostream>
#include <vector>
using namespace std;
int merge(vector<int>& arr, int l, int m, int r) {
int comparisons = 0;
int n1 = m - l + 1;
int n2 = r - m;
vector<int> L(n1), R(n2);
for (int i = 0; i < n1; i++)
L[i] = arr[l + i];
for (int j = 0; j < n2; j++)
R[j] = arr[m + 1 + j];
int i = 0, j = 0, k = l;
while (i < n1 && j < n2) {
if (L[i] <= R[j]) {
arr[k] = L[i];
i++;
} else {
arr[k] = R[j];
j++;
}
comparisons++;
k++;
}
while (i < n1) {
arr[k] = L[i];
i++;
k++;
}
while (j < n2) {
arr[k] = R[j];
j++;
k++;
}
return comparisons;
}
int mergeSort(vector<int>& arr, int l, int r) {
int comparisons = 0;
if (l < r) {
int m = l + (r - l) / 2;
comparisons += mergeSort(arr, l, m);
comparisons += mergeSort(arr, m + 1, r);
comparisons += merge(arr, l, m, r);
}
return comparisons;
}
int main() {
vector<int> arr = {12, 11, 13, 5, 6};
int comparisons = mergeSort(arr, 0, arr.size() - 1);
cout << "Sorted array:";
for (int x : arr)
cout << " " << x;
cout << "\nComparisons: " << comparisons << endl;
return 0;
}
```
3) Heap Sort with reporting the number of comparisons:
```cpp
#include <iostream>
#include <vector>
using namespace std;
void heapify(vector<int>& arr, int n, int i, int& comparisons) {
int largest = i;
int l = 2 * i + 1;
int r = 2 * i + 2;
if (l < n && arr[l] > arr[largest])
largest = l;
comparisons++;
if (r < n && arr[r] > arr[largest])
largest = r;
comparisons++;
if (largest != i) {
swap(arr[i], arr[largest]);
heapify(arr, n, largest, comparisons);
}
}
int heapSort(vector<int>& arr) {
int comparisons = 0;
int n = arr.size();
for (int i = n / 2 - 1; i >= 0; i--)
heapify(arr, n, i, comparisons);
for (int i = n - 1; i > 0; i--) {
swap(arr[0], arr[i]);
heapify(arr, i, 0, comparisons);
}
return comparisons;
}
int main() {
vector<int> arr = {12, 11, 13, 5, 6};
int comparisons = heapSort(arr);
cout << "Sorted array:";
for (int x : arr)
cout << " " << x;
cout << "\nComparisons: " << comparisons << endl;
return 0;
}
```
4) Quick Sort with reporting the number of comparisons:
```cpp
#include <iostream>
#include <vector>
using namespace std;
int partition(vector<int>& arr, int low, int high, int& comparisons) {
int pivot = arr[high];
int i = low - 1;
for (int j = low; j <= high - 1; j++) {
if (arr[j] < pivot) {
i++;
swap(arr[i], arr[j]);
}
comparisons++;
}
swap(arr[i + 1], arr[high]);
return (i + 1);
}
int quickSort(vector<int>& arr, int low, int high) {
int comparisons = 0;
if (low < high) {
int pi = partition(arr, low, high, comparisons);
comparisons += quickSort(arr, low, pi - 1);
comparisons += quickSort(arr, pi + 1, high);
}
return comparisons;
}
int main() {
vector<int> arr = {12, 11, 13, 5, 6};
int comparisons = quickSort(arr, 0, arr.size() - 1);
cout << "Sorted array:";
for (int x : arr)
cout << " " << x;
cout << "\nComparisons: " << comparisons << endl;
return 0;
}
```
5) Strassen's algorithm for matrix multiplication:
```cpp
#include <iostream>
#include <vector>
using namespace std;
vector<vector<int>> strassenMultiply(vector<vector<int>>& A, vector<vector<int>>& B) {
int n = A.size();
vector<vector<int>> C(n, vector<int>(n, 0));
if (n == 1) {
C[0][0] = A[0][0] * B[0][0];
return C;
}
vector<vector<int>> A11(n / 2, vector<int>(n / 2));
vector<vector<int>> A12(n / 2, vector<int>(n / 2));
vector<vector<int>> A21(n / 2, vector<int>(n / 2));
vector<vector<int>> A22(n / 2, vector<int>(n / 2));
vector<vector<int>> B11(n / 2, vector<int>(n / 2));
vector<vector<int>> B12(n / 2, vector<int>(n / 2));
vector<vector<int>> B21(n / 2, vector<int>(
n / 2));
vector<vector<int>> B22(n / 2, vector<int>(n / 2));
for (int i = 0; i < n / 2; i++) {
for (int j = 0; j < n / 2; j++) {
A11[i][j] = A[i][j];
A12[i][j] = A[i][j + n / 2];
A21[i][j] = A[i + n / 2][j];
A22[i][j] = A[i + n / 2][j + n / 2];
B11[i][j] = B[i][j];
B12[i][j] = B[i][j + n / 2];
B21[i][j] = B[i + n / 2][j];
B22[i][j] = B[i + n / 2][j + n / 2];
}
}
vector<vector<int>> M1 = strassenMultiply(A11, matrixSubtract(B12, B22));
vector<vector<int>> M2 = strassenMultiply(matrixAdd(A11, A12), B22);
vector<vector<int>> M3 = strassenMultiply(matrixAdd(A21, A22), B11);
vector<vector<int>> M4 = strassenMultiply(A22, matrixSubtract(B21, B11));
vector<vector<int>> M5 = strassenMultiply(matrixAdd(A11, A22), matrixAdd(B11, B22));
vector<vector<int>> M6 = strassenMultiply(matrixSubtract(A12, A22), matrixAdd(B21,
B22));
vector<vector<int>> M7 = strassenMultiply(matrixSubtract(A11, A21), matrixAdd(B11,
B12));
vector<vector<int>> C11 = matrixAdd(matrixSubtract(matrixAdd(M5, M4), M2), M6);
vector<vector<int>> C12 = matrixAdd(M1, M2);
vector<vector<int>> C21 = matrixAdd(M3, M4);
vector<vector<int>> C22 = matrixAdd(matrixSubtract(matrixAdd(M5, M1), M3), M7);
for (int i = 0; i < n / 2; i++) {
for (int j = 0; j < n / 2; j++) {
C[i][j] = C11[i][j];
C[i][j + n / 2] = C12[i][j];
C[i + n / 2][j] = C21[i][j];
C[i + n / 2][j + n / 2] = C22[i][j];
}
}
return C;
}
int main() {
vector<vector<int>> A = {{1, 2}, {3, 4}};
vector<vector<int>> B = {{5, 6}, {7, 8}};
vector<vector<int>> C = strassenMultiply(A, B);
cout << "Resultant Matrix:" << endl;
for (auto row : C) {
for (int val : row)
cout << val << " ";
cout << endl;
}
return 0;
}
```
6) Count Sort:
```cpp
#include <iostream>
#include <vector>
using namespace std;
void countSort(vector<int>& arr) {
int maxVal = *max_element(arr.begin(), arr.end());
vector<int> count(maxVal + 1, 0);
vector<int> output(arr.size());
for (int i = 0; i < arr.size(); i++)
count[arr[i]]++;
for (int i = 1; i <= maxVal; i++)
count[i] += count[i - 1];
for (int i = arr.size() - 1; i >= 0; i--) {
output[count[arr[i]] - 1] = arr[i];
count[arr[i]]--;
}
for (int i = 0; i < arr.size(); i++)
arr[i] = output[i];
}
int main() {
vector<int> arr = {4, 2, 2, 8, 3, 3, 1};
countSort(arr);
cout << "Sorted array:";
for (int x : arr)
cout << " " << x;
cout << endl;
return 0;
}
```
7) Breadth-First Search (BFS) for a graph:
```cpp
#include <iostream>
#include <list>
#include <queue>
using namespace std;
class Graph {
int V;
list<int>* adj;
public:
Graph(int V) {
this->V = V;
adj = new list<int>[V];
}
void addEdge(int v, int w) {
adj[v].push_back(w);
}
void BFS(int s) {
bool* visited = new bool[V];
for (int i = 0; i < V; i++)
visited[i] = false;
queue<int> q;
visited[s] = true;
q.push(s);
while (!q.empty()) {
s = q.front();
cout << s << " ";
q.pop();
for (auto i = adj[s].begin(); i != adj[s].end(); ++i) {
if (!visited[*i]) {
visited[*i] = true;
q.push(*i);
}
}
}
}
};
int main() {
Graph g(4);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 2);
g.addEdge(2, 0);
g.addEdge(2, 3);
g.addEdge(3, 3);
cout << "BFS traversal starting from vertex 2: ";
g.BFS(2);
cout << endl;
return 0;
}
```
8) Depth-First Search (DFS) for a graph:
```cpp
#include <iostream>
#include <list>
using namespace std;
class Graph {
int V;
list<int>* adj;
void DFSUtil(int v, bool visited[]) {
visited[v] = true;
cout << v << " ";
for (auto i = adj[v].begin(); i != adj[v].end(); ++i)
if (!visited[*i])
DFSUtil(*i, visited);
}
public:
Graph(int V) {
this->V = V;
adj = new list<int>[V];
}
void addEdge(int v, int w) {
adj[v].push_back(w);
}
void DFS(int v) {
bool* visited = new bool[V];
for (int i = 0; i < V; i++)
visited[i] = false;
DFSUtil(v, visited);
}
};
int main() {
Graph g(4);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 2);
g.addEdge(2, 0);
g.addEdge(2, 3);
g.addEdge(3, 3
);
cout << "DFS traversal starting from vertex 2: ";
g.DFS(2);
cout << endl;
return 0;
}
```
9) Prim's algorithm for Minimum Spanning Tree:
```cpp
#include <iostream>
#include <climits>
#include <vector>
using namespace std;
#define V 5
int minKey(int key[], bool mstSet[]) {
int min = INT_MAX, min_index;
for (int v = 0; v < V; v++)
if (mstSet[v] == false && key[v] < min)
min = key[v], min_index = v;
return min_index;
}
void printMST(int parent[], vector<vector<int>>& graph) {
cout << "Edge \tWeight\n";
for (int i = 1; i < V; i++)
cout << parent[i] << " - " << i << "\t" << graph[i][parent[i]] << endl;
}
void primMST(vector<vector<int>>& graph) {
int parent[V];
int key[V];
bool mstSet[V];
for (int i = 0; i < V; i++)
key[i] = INT_MAX, mstSet[i] = false;
key[0] = 0;
parent[0] = -1;
for (int count = 0; count < V - 1; count++) {
int u = minKey(key, mstSet);
mstSet[u] = true;
for (int v = 0; v < V; v++)
if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v])
parent[v] = u, key[v] = graph[u][v];
}
printMST(parent, graph);
}
int main() {
vector<vector<int>> graph = {{0, 2, 0, 6, 0},
{2, 0, 3, 8, 5},
{0, 3, 0, 0, 7},
{6, 8, 0, 0, 9},
{0, 5, 7, 9, 0}};
primMST(graph);
return 0;
}
```
10) 0-1 Knapsack problem:
```cpp
#include <iostream>
#include <vector>
using namespace std;
int knapsack(int W, vector<int>& wt, vector<int>& val, int n) {
if (n == 0 || W == 0)
return 0;
if (wt[n - 1] > W)
return knapsack(W, wt, val, n - 1);
else
return max(val[n - 1] + knapsack(W - wt[n - 1], wt, val, n - 1), knapsack(W, wt, val, n -
1));
}
int main() {
vector<int> val = {60, 100, 120};
vector<int> wt = {10, 20, 30};
int W = 50;
int n = val.size();
cout << "Maximum value: " << knapsack(W, wt, val, n) << endl;
return 0;
}
```